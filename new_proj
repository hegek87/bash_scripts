#!/bin/bash

# Given a path name, will construct the path by successive
# calls to mkdir, then it will enter the path and create 
# the following
#		1. compile - a file to compile the program
#		2. makefile
#		3. .c and .h file based on the FILE_NAME
#		4. objects directory
#
# DEPENDENCIES specifies any files that must be compiled along with 
# our file, multiple dependency paths should be seperated by commas

PROJ_PATH=$1
FILE_NAME=$2
DEPENDENCIES=$3
PATH_START=$4

if ! [[ -z $PATH_START ]]; then
	cd $PATH_START
fi

# parse the path and create the directory structure
for i in `echo $PROJ_PATH | tr '/' ' '`
do
	mkdir $i
	cd $i
done

mkdir objects

# create .c file
touch $FILE_NAME".c"
echo "#include <stdio.h>
int main(void){
	printf(\"HI\n\");
	return 0;
}" > $FILE_NAME".c"

# create header
touch $FILE_NAME".h"
UC=`echo $FILE_NAME | tr '[:lower:]' '[:upper:]'`

DEP_LIST=`echo $DEPENDENCIES | tr ',' ' '`

echo "#ifndef $UC""_H""
#define $UC""_H"" " > $FILE_NAME".h"
if ! [[ -z DEPENDENCIES ]]; then
	#include dependencies
	for i in $DEP_LIST
	do
		echo "#include \"" $i".h\"" >> $FILE_NAME".h"
	done
fi
echo "#endif" >> $FILE_NAME".h"


# create compile executable
touch compile
chmod u+x compile

echo "#!/bin/bash

if [[ \"\$1\" = \"r\" ]]; then
	make
fi

if [[ \"\$1\" = \"m\" ]]; then
	make
	valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes ./objects/"$FILE_NAME"
fi

if [[ \"\$1\" = \"d\" ]]; then
	gdb ./objects/"$FILE_NAME"
else
	./objects/"$FILE_NAME"
fi" > compile

# create makefile
touch makefile

echo "all:
	gcc -c -g -Wall "$FILE_NAME".c" > makefile
if ! [[ -z DEPENDENCIES ]]; then
	for i in $DEP_LIST
	do
		echo "	gcc -c -g -Wall " $i".c" >> makefile
	done
fi

# link files
OBJ_LIST=""
for i in $DEP_LIST
do
	OBJ_LIST+=$(basename $i)".o "
done
echo "	gcc -g -Wall -o ./objects/"$FILE_NAME" "$FILE_NAME".o "$OBJ_LIST >> makefile

echo "	mv *.o ./objects" >> makefile


